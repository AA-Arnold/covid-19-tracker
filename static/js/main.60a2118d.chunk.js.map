{"version":3,"sources":["infoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","active","isRed","total","props","Card","className","onClick","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","React","setCountries","setCountry","setCountryInfo","tableData","setTableDate","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","id","_id","getCountriesAndIso","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.60a2118d.chunk.js","sourcesContent":["import React from 'react'\r\nimport './infobox.css'\r\nimport { Card, CardContent, Typography } from '@material-ui/core'\r\n\r\nconst InfoBox = ({ title, cases, active, isRed, total, ...props }) => (\r\n    <Card\r\n        className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}\r\n        onClick={props.onClick}>\r\n        <CardContent>\r\n            <Typography className=\"infoBox__title\" color='textSecondary'>{title}</Typography>\r\n            <h2 className={`infoBox__cases ${!isRed && \"infoBox_cases--green\"}`}>{cases}</h2>\r\n            <Typography className=\"infoBox__total\" color='textSecondary'>{total}</Typography>\r\n        </CardContent>\r\n    </Card>\r\n)\r\n\r\nexport default InfoBox ","import React from 'react'\r\nimport numeral from 'numeral'\r\nimport { Circle, Popup } from 'react-leaflet'\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        multiplier: 800\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        multiplier: 2000\r\n    }\r\n}\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a, b) => {\r\n        if (a.cases > b.cases) {\r\n            return -1\r\n        } else {\r\n            return 1\r\n        }\r\n    })\r\n    return sortedData\r\n}\r\n\r\nexport const prettyPrintStat = (stat) => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n//draw circles on the map\r\nexport const showDataOnMap = (data, casesType = 'cases') =>\r\n    data.map((country) => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            radius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div className=\"info-flag\" style={{ backgroundImage: `url(${country.countryInfo.flag})` }} />\r\n                    <div className=\"info-name\">Cases : {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-confirmed\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-recovered\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\"></div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ))\r\n","import React from 'react'\r\nimport './map.css'\r\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet'\r\nimport { showDataOnMap } from './util'\r\n\r\nconst Map = ({ countries, casesType, center, zoom }) => {\r\n    return (\r\n        <div className='map'>\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport numeral from 'numeral'\r\nimport './table.css'\r\n\r\nconst Table = ({ countries }) => (\r\n    <div className='table'>\r\n        {countries.map(({ country, cases }) => (\r\n            <tr>\r\n                <td>{country}</td>\r\n                <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n            </tr>\r\n        ))}\r\n    </div>\r\n)\r\nexport default Table","import React, { useEffect, useState } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport numeral from 'numeral'\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        }\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0.0\");\r\n            }\r\n        }\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: 'time',\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\"\r\n                }\r\n            }\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\")\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\n\r\n\r\nconst buildChartData = (data, casesType) => {\r\n    let chartData = []\r\n    let lastDataPoint;\r\n\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint\r\n            }\r\n            chartData.push(newDataPoint)\r\n        }\r\n        lastDataPoint = data[casesType][date]\r\n    }\r\n    return chartData\r\n}\r\n\r\nconst LineGraph = ({ casesType = 'cases', ...props }) => {\r\n    const [data, setData] = useState({})\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    console.log(data)\r\n                    let chartData = buildChartData(data, casesType)\r\n                    setData(chartData)\r\n                })\r\n        }\r\n        fetchData()\r\n    }, [casesType])\r\n\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            I'm a graph\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    options={options}\r\n                    data={{\r\n                        datasets: [{\r\n                            backgroundColor: \"rgba(204, 16, 52, 0.1)\",\r\n                            borderColor: '#cc1034',\r\n                            data: data\r\n                        }]\r\n                    }} />\r\n            )}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph ","import React from 'react';\nimport { FormControl, Select, MenuItem, Card, CardContent } from '@material-ui/core';\nimport InfoBox from './infoBox'\nimport Map from './Map'\nimport Table from './Table'\nimport { sortData, prettyPrintStat } from './util'\nimport LineGraph from './LineGraph'\nimport \"leaflet/dist/leaflet.css\"\nimport './App.css';\n\nfunction App() {\n  const [countries, setCountries] = React.useState([])\n  const [country, setCountry] = React.useState('Worldwide')\n  const [countryInfo, setCountryInfo] = React.useState({})\n  const [tableData, setTableDate] = React.useState([])\n  const [mapCenter, setMapCenter] = React.useState({ lat: 34.80746, lng: -40.4796 })\n  const [mapZoom, setMapZoom] = React.useState(3)\n  const [mapCountries, setMapCountries] = React.useState([])\n  const [casesType, setCasesType] = React.useState('cases')\n\n  React.useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then(response => response.json())\n      .then(data => { setCountryInfo(data) })\n  }, [])\n\n  React.useEffect(() => {\n    const getCountriesAndIso = async () => {\n      await fetch('https://disease.sh/v3/covid-19/countries')\n        .then(response => response.json())\n        .then(data => {\n          const countries = data.map(({ country, countryInfo: { iso2, _id } }) => ({ name: country, value: iso2, id: _id }))\n          // console.log(countries)\n          const sortedData = sortData(data)\n          setTableDate(sortedData)\n          setMapCountries(data)\n          setCountries(countries)\n        })\n    }\n    getCountriesAndIso()\n  }, [])\n\n\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    console.log('YOOOOO>>>>>', countryCode)\n    setCountry(countryCode)\n\n    const url = countryCode === 'Worldwide' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long])\n        setMapZoom(4)\n      })\n\n\n  }\n\n  console.log(countryInfo)\n  console.log('lat and log', mapCenter)\n  return (\n\n    <div className=\"app\">\n      <div className='app__left'>\n        <div className='app__header'>\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className='app__dropdown'>\n            <Select value={country} variant='outlined' onChange={onCountryChange}>\n              <MenuItem value='Worldwide'>Wordwide</MenuItem>\n              {\n                countries.map(countries => <MenuItem value={countries.value}>{countries.name}</MenuItem>)\n              }\n            </Select>\n\n          </FormControl>\n        </div>\n\n        <div className='app__stats'>\n          <InfoBox\n            isRed\n            active={casesType === 'cases'}\n            onClick={e => setCasesType('cases')}\n            title='Coronavarius Cases'\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)} />\n\n          <InfoBox\n            active={casesType === 'recovered'}\n            onClick={e => setCasesType('recovered')}\n            title='Recover'\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)} />\n\n          <InfoBox\n            isRed\n            active={casesType === 'deaths'}\n            onClick={e => setCasesType('deaths')}\n            title='Deaths'\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)} />\n\n        </div>\n\n        <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom} />\n      </div>\n\n      <Card className='app-right'>\n        <CardContent>\n          <h3>Live cases by country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className='app__graph' casesType={casesType} />\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import { App2 } from './App2'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}